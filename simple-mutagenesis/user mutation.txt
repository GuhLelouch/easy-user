# load best codon per AA
codons = <A:...,C:...,D:...,E:...,...>

# load plasmid sequence
...
plasmid = actgatgctatc...

# load protein sequence
...
protein = MATRGGWEFCAAGPAK...

# load mutations
...
mutations = D119C, R122C, K54D, D214A, ...

# Identify and separate components in mutations

mutations_separated = [[],[],[]]

def separate_mutation(mutation)
	import re

	# Define a regular expression pattern to match a letter followed by a number and then another letter
	pattern = r'([A-Za-z])(\d)([A-Za-z])'

	# Use the search function to find the match in the input string
	match = re.search(pattern, input_string)

	# Check if a match was found
	if match:
    		# Extract the individual components into variables
    		original_AA = match.group(1)
    		position = match.group(2)
    		new_AA = match.group(3)
	else:
    		print("Could not find correct mutation pattern.")

	return original_AA, position, new_AA

for mutation in mutations :
	separated_mutation = separate_mutation(mutation)
	mutations_separated[0].append(separated_mutation[0])
	mutations_separated[1].append(separated_mutation[1])
	mutations_separated[2].append(separated_mutation[2])

# Find position of mutation in the gene:
mutations_position_gene = []
for mutation_aa_position in mutations_separated[1] :
	mutation_position_gene = mutation_aa_position / 3

index = plasmid.find(gene_dna_sequence)

if index != -1:
    print(f"Gene found at position {index}")
else:
    print("Gene not found")

for mutation_position in mutations_position_gene :
	new_plasmid = plasmid[:(index - 1)] + codons(mutations_separated[2]) + plasmid[(index + 2):]